# Generated by Django 5.2.3 on 2025-07-02 07:02

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MonitoringSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('health_check_interval', models.IntegerField(default=5)),
                ('response_time_threshold', models.FloatField(default=5000.0)),
                ('error_rate_threshold', models.FloatField(default=5.0)),
                ('cpu_usage_threshold', models.FloatField(default=80.0)),
                ('memory_usage_threshold', models.FloatField(default=80.0)),
                ('disk_usage_threshold', models.FloatField(default=90.0)),
                ('email_notifications', models.BooleanField(default=True)),
                ('slack_notifications', models.BooleanField(default=False)),
                ('slack_webhook_url', models.URLField(blank=True)),
                ('notification_emails', models.JSONField(blank=True, default=list)),
                ('health_data_retention', models.IntegerField(default=30)),
                ('error_data_retention', models.IntegerField(default=90)),
                ('performance_data_retention', models.IntegerField(default=30)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Monitoring Settings',
                'verbose_name_plural': 'Monitoring Settings',
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('url', models.URLField()),
                ('health_endpoint', models.CharField(default='/health/', max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ErrorLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_type', models.CharField(choices=[('500', 'Server Error (500)'), ('404', 'Not Found (404)'), ('403', 'Forbidden (403)'), ('database', 'Database Error'), ('api', 'API Error'), ('timeout', 'Timeout Error'), ('other', 'Other')], max_length=20)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('message', models.TextField()),
                ('stack_trace', models.TextField(blank=True)),
                ('url_path', models.CharField(blank=True, max_length=500)),
                ('user_agent', models.CharField(blank=True, max_length=500)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_id', models.CharField(blank=True, max_length=100)),
                ('request_data', models.JSONField(blank=True, default=dict)),
                ('environment_data', models.JSONField(blank=True, default=dict)),
                ('count', models.IntegerField(default=1)),
                ('first_seen', models.DateTimeField(auto_now_add=True)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_by', models.CharField(blank=True, max_length=100)),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='errors', to='monitoring.platform')),
            ],
            options={
                'ordering': ['-last_seen'],
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('downtime', 'Platform Downtime'), ('high_error_rate', 'High Error Rate'), ('slow_response', 'Slow Response Time'), ('resource_usage', 'High Resource Usage'), ('database_issue', 'Database Issue'), ('custom', 'Custom Alert')], max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('acknowledged', 'Acknowledged'), ('resolved', 'Resolved')], default='active', max_length=15)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_by', models.CharField(blank=True, max_length=100)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('resolved_by', models.CharField(blank=True, max_length=100)),
                ('notification_sent', models.BooleanField(default=False)),
                ('notification_methods', models.JSONField(blank=True, default=list)),
                ('related_error', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='monitoring.errorlog')),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='monitoring.platform')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemHealth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('online', 'Online'), ('offline', 'Offline'), ('warning', 'Warning'), ('error', 'Error')], max_length=20)),
                ('response_time', models.FloatField(blank=True, null=True)),
                ('status_code', models.IntegerField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('checked_at', models.DateTimeField(auto_now_add=True)),
                ('cpu_usage', models.FloatField(blank=True, null=True)),
                ('memory_usage', models.FloatField(blank=True, null=True)),
                ('disk_usage', models.FloatField(blank=True, null=True)),
                ('database_status', models.CharField(blank=True, max_length=20, null=True)),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_checks', to='monitoring.platform')),
            ],
            options={
                'ordering': ['-checked_at'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avg_response_time', models.FloatField()),
                ('min_response_time', models.FloatField()),
                ('max_response_time', models.FloatField()),
                ('total_requests', models.IntegerField(default=0)),
                ('successful_requests', models.IntegerField(default=0)),
                ('failed_requests', models.IntegerField(default=0)),
                ('cpu_usage', models.FloatField(blank=True, null=True)),
                ('memory_usage', models.FloatField(blank=True, null=True)),
                ('disk_usage', models.FloatField(blank=True, null=True)),
                ('db_connections', models.IntegerField(blank=True, null=True)),
                ('slow_queries', models.IntegerField(default=0)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='monitoring.platform')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['platform', '-created_at'], name='monitoring__platfor_f91400_idx'), models.Index(fields=['period_start', 'period_end'], name='monitoring__period__2d5306_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='errorlog',
            index=models.Index(fields=['platform', '-last_seen'], name='monitoring__platfor_97d1a9_idx'),
        ),
        migrations.AddIndex(
            model_name='errorlog',
            index=models.Index(fields=['severity', '-last_seen'], name='monitoring__severit_dbb0b9_idx'),
        ),
        migrations.AddIndex(
            model_name='errorlog',
            index=models.Index(fields=['error_type', '-last_seen'], name='monitoring__error_t_f32751_idx'),
        ),
        migrations.AddIndex(
            model_name='errorlog',
            index=models.Index(fields=['is_resolved', '-last_seen'], name='monitoring__is_reso_bd4393_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['platform', 'status', '-created_at'], name='monitoring__platfor_4de5aa_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['severity', 'status', '-created_at'], name='monitoring__severit_c7ec34_idx'),
        ),
        migrations.AddIndex(
            model_name='systemhealth',
            index=models.Index(fields=['platform', '-checked_at'], name='monitoring__platfor_f07769_idx'),
        ),
        migrations.AddIndex(
            model_name='systemhealth',
            index=models.Index(fields=['status', '-checked_at'], name='monitoring__status_3d7112_idx'),
        ),
    ]
